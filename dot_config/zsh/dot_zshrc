# -----------------------------------------------------------------------------
# Environment Setup (MUST RUN FIRST)
# -----------------------------------------------------------------------------
# OS-Specific Environment Setup (like Homebrew)
if [[ "$(uname)" == "Darwin" ]]; then
  # Set up Homebrew environment. Check for both Apple Silicon and Intel paths.
  if [ -x "/opt/homebrew/bin/brew" ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [ -x "/usr/local/bin/brew" ]; then
    eval "$(/usr/local/bin/brew shellenv)"
  fi
fi

# Initialize Zsh completion system
autoload -Uz compinit
compinit

# -----------------------------------------------------------------------------
# Custom Prompt
# -----------------------------------------------------------------------------
LS_COLORS="di=1;37"
autoload -Uz vcs_info
precmd() { vcs_info }
zstyle ':vcs_info:git:*' formats '(%b) '
zstyle ':vcs_info:*' enable git
setopt PROMPT_SUBST
PROMPT='${CONDA_DEFAULT_ENV:+($CONDA_DEFAULT_ENV) }%1~ ${vcs_info_msg_0_}%% '

# -----------------------------------------------------------------------------
# Evals & Sourcing
# -----------------------------------------------------------------------------

# Initialize tools only if they exist in the PATH
if command -v pyenv &> /dev/null; then
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

if command -v zoxide &> /dev/null; then
  eval "$(zoxide init zsh)"
fi

if command -v perl &> /dev/null; then
    eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"
fi

# -----------------------------------------------------------------------------
# OS-Specific Sourcing for Shell Plugins
# -----------------------------------------------------------------------------
if [[ "$(uname)" == "Darwin" ]]; then
  # macOS (Homebrew)
  # Source plugins using the $HOMEBREW_PREFIX variable for robustness
  if [ -n "$HOMEBREW_PREFIX" ]; then
    if [ -f "$HOMEBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]; then
        source "$HOMEBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
    fi
    if [ -f "$HOMEBREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]; then
        source "$HOMEBREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    fi
    if [ -f "$HOMEBREW_PREFIX/share/zsh-autopair/autopair.zsh" ]; then
        source "$HOMEBREW_PREFIX/share/zsh-autopair/autopair.zsh"
    fi
  fi
elif [[ "$(uname)" == "Linux" ]]; then
  # Arch Linux (check common pacman/yay paths)
  if [ -f /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
      source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
  elif [ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
      source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
  fi

  if [ -f /usr/share/zsh/plugins/zsh-autopair/zsh-autopair.plugin.zsh ]; then
      source /usr/share/zsh/plugins/zsh-autopair/zsh-autopair.plugin.zsh
  elif [ -f /usr/share/zsh-autopair/autopair.zsh ]; then
      source /usr/share/zsh-autopair/autopair.zsh
  fi
fi

# FZF (generic, sourced after OS-specific setup to avoid path issues)
if command -v fzf &> /dev/null; then
    source <(fzf --zsh)
fi

# -----------------------------------------------------------------------------
# Global Aliases
# -----------------------------------------------------------------------------
alias tree='tree -I "node_modules|bower_components"'
alias la='ls -la'
alias l='eza --all --icons'
alias cls='clear'
alias v="nvim"
alias vi="nvim"
alias t="tmux a"
alias cd="z"
alias y="yazi"
alias gs="git status --short"
alias fman="compgen -c | fzf | xargs man"
alias what='tldr'

# Script Alias
alias tt="tmux-new"
alias ccp="create-project"
alias dp="delete-project"

# -----------------------------------------------------------------------------
# OS Specific Aliases
# -----------------------------------------------------------------------------

if [[ "$(uname)" == "Darwin" ]]; then
    # Add macos specific aliases here
elif [[ "$(uname)" == "Linux" ]]; then
    # add arch specific aliases here
    alias zed="zeditor"
fi


# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
format-cpp() {
    if [ -f ".clang-format" ]; then
        echo "Using .clang-format found in the current directory."
    elif [ -f "../.clang-format" ]; then
        echo "Using .clang-format found in the parent directory."
    else
        echo "No .clang-format file found in the current or parent directory."
        return 1
    fi

    find . -name "*.cpp" -o -name "*.h" | while read -r file; do
        echo "Formatting $file..."
        clang-format -i "$file"
    done

    echo "Formatting Complete"
}

# -----------------------------------------------------------------------------
# OS-Specific Conda Initialization (MUST BE LAST)
# -----------------------------------------------------------------------------
if [[ "$(uname)" == "Darwin" ]]; then
  # Conda for macOS
  if [ -x "/opt/anaconda3/bin/conda" ]; then
    __conda_setup="$('/opt/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "/opt/anaconda3/etc/profile.d/conda.sh" ]; then
            . "/opt/anaconda3/etc/profile.d/conda.sh"
        else
            export PATH="/opt/anaconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
  fi
elif [[ "$(uname)" == "Linux" ]]; then
  # Conda for Linux
  if [ -x "$HOME/anaconda3/bin/conda" ]; then
    __conda_setup="$('$HOME/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
    if [ $? -eq 0 ]; then
        eval "$__conda_setup"
    else
        if [ -f "$HOME/anaconda3/etc/profile.d/conda.sh" ]; then
            . "$HOME/anaconda3/etc/profile.d/conda.sh"
        else
            export PATH="$HOME/anaconda3/bin:$PATH"
        fi
    fi
    unset __conda_setup
  fi
fi
